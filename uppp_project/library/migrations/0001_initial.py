# Generated by Django 4.2.1 on 2023-05-21 01:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book_Title', models.CharField(max_length=200)),
                ('Book_Author', models.CharField(max_length=200)),
                ('Book_Description', models.TextField(max_length=650)),
                ('Book_YearOfPublishing', models.IntegerField()),
                ('Book_ISBN', models.IntegerField()),
                ('Book_UDK', models.CharField(max_length=200, null=True)),
                ('Book_BBK', models.CharField(max_length=200, null=True)),
                ('Book_Aviability', models.BooleanField(default=True)),
                ('Book_Quanity', models.IntegerField(max_length=35, null=True)),
                ('Book_Photo', models.ImageField(default='media/book_default.jpg', upload_to='media/books')),
                ('Book_DateOfAdd', models.DateField(auto_now_add=True, null=True)),
                ('Book_Popular', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name': 'Книги',
                'verbose_name_plural': 'Книги',
                'ordering': ['Book_Genre', 'Book_Title'],
            },
        ),
        migrations.CreateModel(
            name='Book_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Genre', models.CharField(db_index=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='News_paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('News_DateOfPub', models.DateField(auto_now_add=True, null=True)),
                ('News_Article', models.TextField()),
                ('News_TitleOfArticle', models.CharField(max_length=40)),
                ('News_ArticleAuthor', models.CharField(max_length=80)),
                ('News_Photo', models.ImageField(default='media/default_post.jpg', upload_to='media/posts/')),
            ],
        ),
        migrations.CreateModel(
            name='Library_Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Date_taken', models.DateField()),
                ('Dste_given', models.DateField()),
                ('Book_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='library.book')),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='Book_Genre',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='library.book_category'),
        ),
        migrations.CreateModel(
            name='LibraryUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30)),
                ('second_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('date_of_birth', models.DateField(null=True)),
                ('email', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=30)),
                ('groups', models.ManyToManyField(related_name='library_users', related_query_name='library_user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='library_users', related_query_name='library_user', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
